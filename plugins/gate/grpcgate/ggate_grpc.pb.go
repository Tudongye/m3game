// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: ggate.proto

package grpcgate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	gate "m3game/plugins/gate"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GGateSerClient is the client API for GGateSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GGateSerClient interface {
	CSTransport(ctx context.Context, opts ...grpc.CallOption) (GGateSer_CSTransportClient, error)
}

type gGateSerClient struct {
	cc grpc.ClientConnInterface
}

func NewGGateSerClient(cc grpc.ClientConnInterface) GGateSerClient {
	return &gGateSerClient{cc}
}

func (c *gGateSerClient) CSTransport(ctx context.Context, opts ...grpc.CallOption) (GGateSer_CSTransportClient, error) {
	stream, err := c.cc.NewStream(ctx, &GGateSer_ServiceDesc.Streams[0], "/proto.GGateSer/CSTransport", opts...)
	if err != nil {
		return nil, err
	}
	x := &gGateSerCSTransportClient{stream}
	return x, nil
}

type GGateSer_CSTransportClient interface {
	Send(*gate.CSMsg) error
	Recv() (*gate.CSMsg, error)
	grpc.ClientStream
}

type gGateSerCSTransportClient struct {
	grpc.ClientStream
}

func (x *gGateSerCSTransportClient) Send(m *gate.CSMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gGateSerCSTransportClient) Recv() (*gate.CSMsg, error) {
	m := new(gate.CSMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GGateSerServer is the server API for GGateSer service.
// All implementations must embed UnimplementedGGateSerServer
// for forward compatibility
type GGateSerServer interface {
	CSTransport(GGateSer_CSTransportServer) error
	mustEmbedUnimplementedGGateSerServer()
}

// UnimplementedGGateSerServer must be embedded to have forward compatible implementations.
type UnimplementedGGateSerServer struct {
}

func (UnimplementedGGateSerServer) CSTransport(GGateSer_CSTransportServer) error {
	return status.Errorf(codes.Unimplemented, "method CSTransport not implemented")
}
func (UnimplementedGGateSerServer) mustEmbedUnimplementedGGateSerServer() {}

// UnsafeGGateSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GGateSerServer will
// result in compilation errors.
type UnsafeGGateSerServer interface {
	mustEmbedUnimplementedGGateSerServer()
}

func RegisterGGateSerServer(s grpc.ServiceRegistrar, srv GGateSerServer) {
	s.RegisterService(&GGateSer_ServiceDesc, srv)
}

func _GGateSer_CSTransport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GGateSerServer).CSTransport(&gGateSerCSTransportServer{stream})
}

type GGateSer_CSTransportServer interface {
	Send(*gate.CSMsg) error
	Recv() (*gate.CSMsg, error)
	grpc.ServerStream
}

type gGateSerCSTransportServer struct {
	grpc.ServerStream
}

func (x *gGateSerCSTransportServer) Send(m *gate.CSMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gGateSerCSTransportServer) Recv() (*gate.CSMsg, error) {
	m := new(gate.CSMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GGateSer_ServiceDesc is the grpc.ServiceDesc for GGateSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GGateSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GGateSer",
	HandlerType: (*GGateSerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CSTransport",
			Handler:       _GGateSer_CSTransport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ggate.proto",
}
