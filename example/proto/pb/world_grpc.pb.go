// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: world.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorldSer_CreateEntity_FullMethodName = "/proto.WorldSer/CreateEntity"
	WorldSer_MoveEntity_FullMethodName   = "/proto.WorldSer/MoveEntity"
	WorldSer_ViewEntity_FullMethodName   = "/proto.WorldSer/ViewEntity"
	WorldSer_ViewPosition_FullMethodName = "/proto.WorldSer/ViewPosition"
)

// WorldSerClient is the client API for WorldSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldSerClient interface {
	CreateEntity(ctx context.Context, in *CreateEntity_Req, opts ...grpc.CallOption) (*CreateEntity_Rsp, error)
	MoveEntity(ctx context.Context, in *MoveEntity_Req, opts ...grpc.CallOption) (*MoveEntity_Rsp, error)
	ViewEntity(ctx context.Context, in *ViewEntity_Req, opts ...grpc.CallOption) (*ViewEntity_Rsp, error)
	ViewPosition(ctx context.Context, in *ViewPosition_Req, opts ...grpc.CallOption) (*ViewPosition_Rsp, error)
}

type worldSerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldSerClient(cc grpc.ClientConnInterface) WorldSerClient {
	return &worldSerClient{cc}
}

func (c *worldSerClient) CreateEntity(ctx context.Context, in *CreateEntity_Req, opts ...grpc.CallOption) (*CreateEntity_Rsp, error) {
	out := new(CreateEntity_Rsp)
	err := c.cc.Invoke(ctx, WorldSer_CreateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldSerClient) MoveEntity(ctx context.Context, in *MoveEntity_Req, opts ...grpc.CallOption) (*MoveEntity_Rsp, error) {
	out := new(MoveEntity_Rsp)
	err := c.cc.Invoke(ctx, WorldSer_MoveEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldSerClient) ViewEntity(ctx context.Context, in *ViewEntity_Req, opts ...grpc.CallOption) (*ViewEntity_Rsp, error) {
	out := new(ViewEntity_Rsp)
	err := c.cc.Invoke(ctx, WorldSer_ViewEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldSerClient) ViewPosition(ctx context.Context, in *ViewPosition_Req, opts ...grpc.CallOption) (*ViewPosition_Rsp, error) {
	out := new(ViewPosition_Rsp)
	err := c.cc.Invoke(ctx, WorldSer_ViewPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldSerServer is the server API for WorldSer service.
// All implementations must embed UnimplementedWorldSerServer
// for forward compatibility
type WorldSerServer interface {
	CreateEntity(context.Context, *CreateEntity_Req) (*CreateEntity_Rsp, error)
	MoveEntity(context.Context, *MoveEntity_Req) (*MoveEntity_Rsp, error)
	ViewEntity(context.Context, *ViewEntity_Req) (*ViewEntity_Rsp, error)
	ViewPosition(context.Context, *ViewPosition_Req) (*ViewPosition_Rsp, error)
	mustEmbedUnimplementedWorldSerServer()
}

// UnimplementedWorldSerServer must be embedded to have forward compatible implementations.
type UnimplementedWorldSerServer struct {
}

func (UnimplementedWorldSerServer) CreateEntity(context.Context, *CreateEntity_Req) (*CreateEntity_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedWorldSerServer) MoveEntity(context.Context, *MoveEntity_Req) (*MoveEntity_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEntity not implemented")
}
func (UnimplementedWorldSerServer) ViewEntity(context.Context, *ViewEntity_Req) (*ViewEntity_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewEntity not implemented")
}
func (UnimplementedWorldSerServer) ViewPosition(context.Context, *ViewPosition_Req) (*ViewPosition_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPosition not implemented")
}
func (UnimplementedWorldSerServer) mustEmbedUnimplementedWorldSerServer() {}

// UnsafeWorldSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldSerServer will
// result in compilation errors.
type UnsafeWorldSerServer interface {
	mustEmbedUnimplementedWorldSerServer()
}

func RegisterWorldSerServer(s grpc.ServiceRegistrar, srv WorldSerServer) {
	s.RegisterService(&WorldSer_ServiceDesc, srv)
}

func _WorldSer_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntity_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldSerServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldSer_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldSerServer).CreateEntity(ctx, req.(*CreateEntity_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldSer_MoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntity_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldSerServer).MoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldSer_MoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldSerServer).MoveEntity(ctx, req.(*MoveEntity_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldSer_ViewEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewEntity_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldSerServer).ViewEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldSer_ViewEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldSerServer).ViewEntity(ctx, req.(*ViewEntity_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldSer_ViewPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPosition_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldSerServer).ViewPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldSer_ViewPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldSerServer).ViewPosition(ctx, req.(*ViewPosition_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldSer_ServiceDesc is the grpc.ServiceDesc for WorldSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorldSer",
	HandlerType: (*WorldSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _WorldSer_CreateEntity_Handler,
		},
		{
			MethodName: "MoveEntity",
			Handler:    _WorldSer_MoveEntity_Handler,
		},
		{
			MethodName: "ViewEntity",
			Handler:    _WorldSer_ViewEntity_Handler,
		},
		{
			MethodName: "ViewPosition",
			Handler:    _WorldSer_ViewPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "world.proto",
}
