// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: async.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsyncSerClient is the client API for AsyncSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsyncSerClient interface {
	TransChannel(ctx context.Context, in *TransChannel_Req, opts ...grpc.CallOption) (*TransChannel_Rsp, error)
	SSPullChannel(ctx context.Context, in *SSPullChannel_Req, opts ...grpc.CallOption) (*SSPullChannel_Rsp, error)
}

type asyncSerClient struct {
	cc grpc.ClientConnInterface
}

func NewAsyncSerClient(cc grpc.ClientConnInterface) AsyncSerClient {
	return &asyncSerClient{cc}
}

func (c *asyncSerClient) TransChannel(ctx context.Context, in *TransChannel_Req, opts ...grpc.CallOption) (*TransChannel_Rsp, error) {
	out := new(TransChannel_Rsp)
	err := c.cc.Invoke(ctx, "/proto.AsyncSer/TransChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncSerClient) SSPullChannel(ctx context.Context, in *SSPullChannel_Req, opts ...grpc.CallOption) (*SSPullChannel_Rsp, error) {
	out := new(SSPullChannel_Rsp)
	err := c.cc.Invoke(ctx, "/proto.AsyncSer/SSPullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsyncSerServer is the server API for AsyncSer service.
// All implementations must embed UnimplementedAsyncSerServer
// for forward compatibility
type AsyncSerServer interface {
	TransChannel(context.Context, *TransChannel_Req) (*TransChannel_Rsp, error)
	SSPullChannel(context.Context, *SSPullChannel_Req) (*SSPullChannel_Rsp, error)
	mustEmbedUnimplementedAsyncSerServer()
}

// UnimplementedAsyncSerServer must be embedded to have forward compatible implementations.
type UnimplementedAsyncSerServer struct {
}

func (UnimplementedAsyncSerServer) TransChannel(context.Context, *TransChannel_Req) (*TransChannel_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransChannel not implemented")
}
func (UnimplementedAsyncSerServer) SSPullChannel(context.Context, *SSPullChannel_Req) (*SSPullChannel_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSPullChannel not implemented")
}
func (UnimplementedAsyncSerServer) mustEmbedUnimplementedAsyncSerServer() {}

// UnsafeAsyncSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsyncSerServer will
// result in compilation errors.
type UnsafeAsyncSerServer interface {
	mustEmbedUnimplementedAsyncSerServer()
}

func RegisterAsyncSerServer(s grpc.ServiceRegistrar, srv AsyncSerServer) {
	s.RegisterService(&AsyncSer_ServiceDesc, srv)
}

func _AsyncSer_TransChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransChannel_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncSerServer).TransChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AsyncSer/TransChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncSerServer).TransChannel(ctx, req.(*TransChannel_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncSer_SSPullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSPullChannel_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncSerServer).SSPullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AsyncSer/SSPullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncSerServer).SSPullChannel(ctx, req.(*SSPullChannel_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// AsyncSer_ServiceDesc is the grpc.ServiceDesc for AsyncSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsyncSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AsyncSer",
	HandlerType: (*AsyncSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransChannel",
			Handler:    _AsyncSer_TransChannel_Handler,
		},
		{
			MethodName: "SSPullChannel",
			Handler:    _AsyncSer_SSPullChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "async.proto",
}
