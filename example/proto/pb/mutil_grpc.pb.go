// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: mutil.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MutilSerClient is the client API for MutilSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutilSerClient interface {
	Hello(ctx context.Context, in *Hello_Req, opts ...grpc.CallOption) (*Hello_Rsp, error)
	TraceHello(ctx context.Context, in *TraceHello_Req, opts ...grpc.CallOption) (*TraceHello_Rsp, error)
	BreakHello(ctx context.Context, in *BreakHello_Req, opts ...grpc.CallOption) (*BreakHello_Rsp, error)
}

type mutilSerClient struct {
	cc grpc.ClientConnInterface
}

func NewMutilSerClient(cc grpc.ClientConnInterface) MutilSerClient {
	return &mutilSerClient{cc}
}

func (c *mutilSerClient) Hello(ctx context.Context, in *Hello_Req, opts ...grpc.CallOption) (*Hello_Rsp, error) {
	out := new(Hello_Rsp)
	err := c.cc.Invoke(ctx, "/proto.MutilSer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutilSerClient) TraceHello(ctx context.Context, in *TraceHello_Req, opts ...grpc.CallOption) (*TraceHello_Rsp, error) {
	out := new(TraceHello_Rsp)
	err := c.cc.Invoke(ctx, "/proto.MutilSer/TraceHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutilSerClient) BreakHello(ctx context.Context, in *BreakHello_Req, opts ...grpc.CallOption) (*BreakHello_Rsp, error) {
	out := new(BreakHello_Rsp)
	err := c.cc.Invoke(ctx, "/proto.MutilSer/BreakHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutilSerServer is the server API for MutilSer service.
// All implementations must embed UnimplementedMutilSerServer
// for forward compatibility
type MutilSerServer interface {
	Hello(context.Context, *Hello_Req) (*Hello_Rsp, error)
	TraceHello(context.Context, *TraceHello_Req) (*TraceHello_Rsp, error)
	BreakHello(context.Context, *BreakHello_Req) (*BreakHello_Rsp, error)
	mustEmbedUnimplementedMutilSerServer()
}

// UnimplementedMutilSerServer must be embedded to have forward compatible implementations.
type UnimplementedMutilSerServer struct {
}

func (UnimplementedMutilSerServer) Hello(context.Context, *Hello_Req) (*Hello_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedMutilSerServer) TraceHello(context.Context, *TraceHello_Req) (*TraceHello_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraceHello not implemented")
}
func (UnimplementedMutilSerServer) BreakHello(context.Context, *BreakHello_Req) (*BreakHello_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreakHello not implemented")
}
func (UnimplementedMutilSerServer) mustEmbedUnimplementedMutilSerServer() {}

// UnsafeMutilSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutilSerServer will
// result in compilation errors.
type UnsafeMutilSerServer interface {
	mustEmbedUnimplementedMutilSerServer()
}

func RegisterMutilSerServer(s grpc.ServiceRegistrar, srv MutilSerServer) {
	s.RegisterService(&MutilSer_ServiceDesc, srv)
}

func _MutilSer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutilSerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MutilSer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutilSerServer).Hello(ctx, req.(*Hello_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutilSer_TraceHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceHello_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutilSerServer).TraceHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MutilSer/TraceHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutilSerServer).TraceHello(ctx, req.(*TraceHello_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutilSer_BreakHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreakHello_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutilSerServer).BreakHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MutilSer/BreakHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutilSerServer).BreakHello(ctx, req.(*BreakHello_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// MutilSer_ServiceDesc is the grpc.ServiceDesc for MutilSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutilSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MutilSer",
	HandlerType: (*MutilSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _MutilSer_Hello_Handler,
		},
		{
			MethodName: "TraceHello",
			Handler:    _MutilSer_TraceHello_Handler,
		},
		{
			MethodName: "BreakHello",
			Handler:    _MutilSer_BreakHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mutil.proto",
}
