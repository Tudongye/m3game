// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: uid.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UidSerClient is the client API for UidSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UidSerClient interface {
	AllocRoleId(ctx context.Context, in *AllocRoleId_Req, opts ...grpc.CallOption) (*AllocRoleId_Rsp, error)
	AllocClubId(ctx context.Context, in *AllocClubId_Req, opts ...grpc.CallOption) (*AllocClubId_Rsp, error)
}

type uidSerClient struct {
	cc grpc.ClientConnInterface
}

func NewUidSerClient(cc grpc.ClientConnInterface) UidSerClient {
	return &uidSerClient{cc}
}

func (c *uidSerClient) AllocRoleId(ctx context.Context, in *AllocRoleId_Req, opts ...grpc.CallOption) (*AllocRoleId_Rsp, error) {
	out := new(AllocRoleId_Rsp)
	err := c.cc.Invoke(ctx, "/proto.UidSer/AllocRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uidSerClient) AllocClubId(ctx context.Context, in *AllocClubId_Req, opts ...grpc.CallOption) (*AllocClubId_Rsp, error) {
	out := new(AllocClubId_Rsp)
	err := c.cc.Invoke(ctx, "/proto.UidSer/AllocClubId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UidSerServer is the server API for UidSer service.
// All implementations must embed UnimplementedUidSerServer
// for forward compatibility
type UidSerServer interface {
	AllocRoleId(context.Context, *AllocRoleId_Req) (*AllocRoleId_Rsp, error)
	AllocClubId(context.Context, *AllocClubId_Req) (*AllocClubId_Rsp, error)
	mustEmbedUnimplementedUidSerServer()
}

// UnimplementedUidSerServer must be embedded to have forward compatible implementations.
type UnimplementedUidSerServer struct {
}

func (UnimplementedUidSerServer) AllocRoleId(context.Context, *AllocRoleId_Req) (*AllocRoleId_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocRoleId not implemented")
}
func (UnimplementedUidSerServer) AllocClubId(context.Context, *AllocClubId_Req) (*AllocClubId_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocClubId not implemented")
}
func (UnimplementedUidSerServer) mustEmbedUnimplementedUidSerServer() {}

// UnsafeUidSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UidSerServer will
// result in compilation errors.
type UnsafeUidSerServer interface {
	mustEmbedUnimplementedUidSerServer()
}

func RegisterUidSerServer(s grpc.ServiceRegistrar, srv UidSerServer) {
	s.RegisterService(&UidSer_ServiceDesc, srv)
}

func _UidSer_AllocRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocRoleId_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UidSerServer).AllocRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UidSer/AllocRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UidSerServer).AllocRoleId(ctx, req.(*AllocRoleId_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UidSer_AllocClubId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocClubId_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UidSerServer).AllocClubId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UidSer/AllocClubId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UidSerServer).AllocClubId(ctx, req.(*AllocClubId_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// UidSer_ServiceDesc is the grpc.ServiceDesc for UidSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UidSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UidSer",
	HandlerType: (*UidSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocRoleId",
			Handler:    _UidSer_AllocRoleId_Handler,
		},
		{
			MethodName: "AllocClubId",
			Handler:    _UidSer_AllocClubId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uid.proto",
}
