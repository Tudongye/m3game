// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: role.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleSerClient is the client API for RoleSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleSerClient interface {
	Register(ctx context.Context, in *Register_Req, opts ...grpc.CallOption) (*Register_Rsp, error)
	Login(ctx context.Context, in *Login_Req, opts ...grpc.CallOption) (*Login_Rsp, error)
	ModifyName(ctx context.Context, in *ModifyName_Req, opts ...grpc.CallOption) (*ModifyName_Rsp, error)
	GetName(ctx context.Context, in *GetName_Req, opts ...grpc.CallOption) (*GetName_Rsp, error)
	MoveRole(ctx context.Context, in *MoveRole_Req, opts ...grpc.CallOption) (*MoveRole_Rsp, error)
	PostChannel(ctx context.Context, in *PostChannel_Req, opts ...grpc.CallOption) (*PostChannel_Rsp, error)
	PullChannel(ctx context.Context, in *PullChannel_Req, opts ...grpc.CallOption) (*PullChannel_Rsp, error)
}

type roleSerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleSerClient(cc grpc.ClientConnInterface) RoleSerClient {
	return &roleSerClient{cc}
}

func (c *roleSerClient) Register(ctx context.Context, in *Register_Req, opts ...grpc.CallOption) (*Register_Rsp, error) {
	out := new(Register_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) Login(ctx context.Context, in *Login_Req, opts ...grpc.CallOption) (*Login_Rsp, error) {
	out := new(Login_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) ModifyName(ctx context.Context, in *ModifyName_Req, opts ...grpc.CallOption) (*ModifyName_Rsp, error) {
	out := new(ModifyName_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/ModifyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) GetName(ctx context.Context, in *GetName_Req, opts ...grpc.CallOption) (*GetName_Rsp, error) {
	out := new(GetName_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) MoveRole(ctx context.Context, in *MoveRole_Req, opts ...grpc.CallOption) (*MoveRole_Rsp, error) {
	out := new(MoveRole_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/MoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) PostChannel(ctx context.Context, in *PostChannel_Req, opts ...grpc.CallOption) (*PostChannel_Rsp, error) {
	out := new(PostChannel_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/PostChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) PullChannel(ctx context.Context, in *PullChannel_Req, opts ...grpc.CallOption) (*PullChannel_Rsp, error) {
	out := new(PullChannel_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/PullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleSerServer is the server API for RoleSer service.
// All implementations must embed UnimplementedRoleSerServer
// for forward compatibility
type RoleSerServer interface {
	Register(context.Context, *Register_Req) (*Register_Rsp, error)
	Login(context.Context, *Login_Req) (*Login_Rsp, error)
	ModifyName(context.Context, *ModifyName_Req) (*ModifyName_Rsp, error)
	GetName(context.Context, *GetName_Req) (*GetName_Rsp, error)
	MoveRole(context.Context, *MoveRole_Req) (*MoveRole_Rsp, error)
	PostChannel(context.Context, *PostChannel_Req) (*PostChannel_Rsp, error)
	PullChannel(context.Context, *PullChannel_Req) (*PullChannel_Rsp, error)
	mustEmbedUnimplementedRoleSerServer()
}

// UnimplementedRoleSerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleSerServer struct {
}

func (UnimplementedRoleSerServer) Register(context.Context, *Register_Req) (*Register_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRoleSerServer) Login(context.Context, *Login_Req) (*Login_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRoleSerServer) ModifyName(context.Context, *ModifyName_Req) (*ModifyName_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyName not implemented")
}
func (UnimplementedRoleSerServer) GetName(context.Context, *GetName_Req) (*GetName_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedRoleSerServer) MoveRole(context.Context, *MoveRole_Req) (*MoveRole_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRole not implemented")
}
func (UnimplementedRoleSerServer) PostChannel(context.Context, *PostChannel_Req) (*PostChannel_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChannel not implemented")
}
func (UnimplementedRoleSerServer) PullChannel(context.Context, *PullChannel_Req) (*PullChannel_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullChannel not implemented")
}
func (UnimplementedRoleSerServer) mustEmbedUnimplementedRoleSerServer() {}

// UnsafeRoleSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleSerServer will
// result in compilation errors.
type UnsafeRoleSerServer interface {
	mustEmbedUnimplementedRoleSerServer()
}

func RegisterRoleSerServer(s grpc.ServiceRegistrar, srv RoleSerServer) {
	s.RegisterService(&RoleSer_ServiceDesc, srv)
}

func _RoleSer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).Register(ctx, req.(*Register_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).Login(ctx, req.(*Login_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_ModifyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyName_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).ModifyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/ModifyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).ModifyName(ctx, req.(*ModifyName_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetName_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).GetName(ctx, req.(*GetName_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_MoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRole_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).MoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/MoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).MoveRole(ctx, req.(*MoveRole_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_PostChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChannel_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).PostChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/PostChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).PostChannel(ctx, req.(*PostChannel_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_PullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullChannel_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).PullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/PullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).PullChannel(ctx, req.(*PullChannel_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleSer_ServiceDesc is the grpc.ServiceDesc for RoleSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleSer",
	HandlerType: (*RoleSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RoleSer_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RoleSer_Login_Handler,
		},
		{
			MethodName: "ModifyName",
			Handler:    _RoleSer_ModifyName_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _RoleSer_GetName_Handler,
		},
		{
			MethodName: "MoveRole",
			Handler:    _RoleSer_MoveRole_Handler,
		},
		{
			MethodName: "PostChannel",
			Handler:    _RoleSer_PostChannel_Handler,
		},
		{
			MethodName: "PullChannel",
			Handler:    _RoleSer_PullChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}

// RoleChSerClient is the client API for RoleChSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleChSerClient interface {
	TransChannel(ctx context.Context, in *TransChannel_Req, opts ...grpc.CallOption) (*TransChannel_Rsp, error)
}

type roleChSerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleChSerClient(cc grpc.ClientConnInterface) RoleChSerClient {
	return &roleChSerClient{cc}
}

func (c *roleChSerClient) TransChannel(ctx context.Context, in *TransChannel_Req, opts ...grpc.CallOption) (*TransChannel_Rsp, error) {
	out := new(TransChannel_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleChSer/TransChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleChSerServer is the server API for RoleChSer service.
// All implementations must embed UnimplementedRoleChSerServer
// for forward compatibility
type RoleChSerServer interface {
	TransChannel(context.Context, *TransChannel_Req) (*TransChannel_Rsp, error)
	mustEmbedUnimplementedRoleChSerServer()
}

// UnimplementedRoleChSerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleChSerServer struct {
}

func (UnimplementedRoleChSerServer) TransChannel(context.Context, *TransChannel_Req) (*TransChannel_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransChannel not implemented")
}
func (UnimplementedRoleChSerServer) mustEmbedUnimplementedRoleChSerServer() {}

// UnsafeRoleChSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleChSerServer will
// result in compilation errors.
type UnsafeRoleChSerServer interface {
	mustEmbedUnimplementedRoleChSerServer()
}

func RegisterRoleChSerServer(s grpc.ServiceRegistrar, srv RoleChSerServer) {
	s.RegisterService(&RoleChSer_ServiceDesc, srv)
}

func _RoleChSer_TransChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransChannel_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleChSerServer).TransChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleChSer/TransChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleChSerServer).TransChannel(ctx, req.(*TransChannel_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleChSer_ServiceDesc is the grpc.ServiceDesc for RoleChSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleChSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleChSer",
	HandlerType: (*RoleChSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransChannel",
			Handler:    _RoleChSer_TransChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
