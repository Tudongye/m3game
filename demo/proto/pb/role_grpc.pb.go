// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: role.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleSerClient is the client API for RoleSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleSerClient interface {
	RoleLogin(ctx context.Context, in *RoleLogin_Req, opts ...grpc.CallOption) (*RoleLogin_Rsp, error)
	RoleGetInfo(ctx context.Context, in *RoleGetInfo_Req, opts ...grpc.CallOption) (*RoleGetInfo_Rsp, error)
	RoleModifyName(ctx context.Context, in *RoleModifyName_Req, opts ...grpc.CallOption) (*RoleModifyName_Rsp, error)
	RolePowerUp(ctx context.Context, in *RolePowerUp_Req, opts ...grpc.CallOption) (*RolePowerUp_Rsp, error)
	RoleKick(ctx context.Context, in *RoleKick_Req, opts ...grpc.CallOption) (*RoleKick_Rsp, error)
	RoleGetClubInfo(ctx context.Context, in *RoleGetClubInfo_Req, opts ...grpc.CallOption) (*RoleGetClubInfo_Rsp, error)
	RoleGetClubList(ctx context.Context, in *RoleGetClubList_Req, opts ...grpc.CallOption) (*RoleGetClubList_Rsp, error)
	RoleGetClubRoleInfo(ctx context.Context, in *RoleGetClubRoleInfo_Req, opts ...grpc.CallOption) (*RoleGetClubRoleInfo_Rsp, error)
	RoleCreateClub(ctx context.Context, in *RoleCreateClub_Req, opts ...grpc.CallOption) (*RoleCreateClub_Rsp, error)
	RoleJoinClub(ctx context.Context, in *RoleJoinClub_Req, opts ...grpc.CallOption) (*RoleJoinClub_Rsp, error)
	RoleExitClub(ctx context.Context, in *RoleExitClub_Req, opts ...grpc.CallOption) (*RoleExitClub_Rsp, error)
	RoleCancelClub(ctx context.Context, in *RoleCancelClub_Req, opts ...grpc.CallOption) (*RoleCancelClub_Rsp, error)
}

type roleSerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleSerClient(cc grpc.ClientConnInterface) RoleSerClient {
	return &roleSerClient{cc}
}

func (c *roleSerClient) RoleLogin(ctx context.Context, in *RoleLogin_Req, opts ...grpc.CallOption) (*RoleLogin_Rsp, error) {
	out := new(RoleLogin_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleGetInfo(ctx context.Context, in *RoleGetInfo_Req, opts ...grpc.CallOption) (*RoleGetInfo_Rsp, error) {
	out := new(RoleGetInfo_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleModifyName(ctx context.Context, in *RoleModifyName_Req, opts ...grpc.CallOption) (*RoleModifyName_Rsp, error) {
	out := new(RoleModifyName_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleModifyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RolePowerUp(ctx context.Context, in *RolePowerUp_Req, opts ...grpc.CallOption) (*RolePowerUp_Rsp, error) {
	out := new(RolePowerUp_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RolePowerUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleKick(ctx context.Context, in *RoleKick_Req, opts ...grpc.CallOption) (*RoleKick_Rsp, error) {
	out := new(RoleKick_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleGetClubInfo(ctx context.Context, in *RoleGetClubInfo_Req, opts ...grpc.CallOption) (*RoleGetClubInfo_Rsp, error) {
	out := new(RoleGetClubInfo_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleGetClubInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleGetClubList(ctx context.Context, in *RoleGetClubList_Req, opts ...grpc.CallOption) (*RoleGetClubList_Rsp, error) {
	out := new(RoleGetClubList_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleGetClubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleGetClubRoleInfo(ctx context.Context, in *RoleGetClubRoleInfo_Req, opts ...grpc.CallOption) (*RoleGetClubRoleInfo_Rsp, error) {
	out := new(RoleGetClubRoleInfo_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleGetClubRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleCreateClub(ctx context.Context, in *RoleCreateClub_Req, opts ...grpc.CallOption) (*RoleCreateClub_Rsp, error) {
	out := new(RoleCreateClub_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleCreateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleJoinClub(ctx context.Context, in *RoleJoinClub_Req, opts ...grpc.CallOption) (*RoleJoinClub_Rsp, error) {
	out := new(RoleJoinClub_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleJoinClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleExitClub(ctx context.Context, in *RoleExitClub_Req, opts ...grpc.CallOption) (*RoleExitClub_Rsp, error) {
	out := new(RoleExitClub_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleExitClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSerClient) RoleCancelClub(ctx context.Context, in *RoleCancelClub_Req, opts ...grpc.CallOption) (*RoleCancelClub_Rsp, error) {
	out := new(RoleCancelClub_Rsp)
	err := c.cc.Invoke(ctx, "/proto.RoleSer/RoleCancelClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleSerServer is the server API for RoleSer service.
// All implementations must embed UnimplementedRoleSerServer
// for forward compatibility
type RoleSerServer interface {
	RoleLogin(context.Context, *RoleLogin_Req) (*RoleLogin_Rsp, error)
	RoleGetInfo(context.Context, *RoleGetInfo_Req) (*RoleGetInfo_Rsp, error)
	RoleModifyName(context.Context, *RoleModifyName_Req) (*RoleModifyName_Rsp, error)
	RolePowerUp(context.Context, *RolePowerUp_Req) (*RolePowerUp_Rsp, error)
	RoleKick(context.Context, *RoleKick_Req) (*RoleKick_Rsp, error)
	RoleGetClubInfo(context.Context, *RoleGetClubInfo_Req) (*RoleGetClubInfo_Rsp, error)
	RoleGetClubList(context.Context, *RoleGetClubList_Req) (*RoleGetClubList_Rsp, error)
	RoleGetClubRoleInfo(context.Context, *RoleGetClubRoleInfo_Req) (*RoleGetClubRoleInfo_Rsp, error)
	RoleCreateClub(context.Context, *RoleCreateClub_Req) (*RoleCreateClub_Rsp, error)
	RoleJoinClub(context.Context, *RoleJoinClub_Req) (*RoleJoinClub_Rsp, error)
	RoleExitClub(context.Context, *RoleExitClub_Req) (*RoleExitClub_Rsp, error)
	RoleCancelClub(context.Context, *RoleCancelClub_Req) (*RoleCancelClub_Rsp, error)
	mustEmbedUnimplementedRoleSerServer()
}

// UnimplementedRoleSerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleSerServer struct {
}

func (UnimplementedRoleSerServer) RoleLogin(context.Context, *RoleLogin_Req) (*RoleLogin_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleLogin not implemented")
}
func (UnimplementedRoleSerServer) RoleGetInfo(context.Context, *RoleGetInfo_Req) (*RoleGetInfo_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGetInfo not implemented")
}
func (UnimplementedRoleSerServer) RoleModifyName(context.Context, *RoleModifyName_Req) (*RoleModifyName_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleModifyName not implemented")
}
func (UnimplementedRoleSerServer) RolePowerUp(context.Context, *RolePowerUp_Req) (*RolePowerUp_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePowerUp not implemented")
}
func (UnimplementedRoleSerServer) RoleKick(context.Context, *RoleKick_Req) (*RoleKick_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleKick not implemented")
}
func (UnimplementedRoleSerServer) RoleGetClubInfo(context.Context, *RoleGetClubInfo_Req) (*RoleGetClubInfo_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGetClubInfo not implemented")
}
func (UnimplementedRoleSerServer) RoleGetClubList(context.Context, *RoleGetClubList_Req) (*RoleGetClubList_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGetClubList not implemented")
}
func (UnimplementedRoleSerServer) RoleGetClubRoleInfo(context.Context, *RoleGetClubRoleInfo_Req) (*RoleGetClubRoleInfo_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGetClubRoleInfo not implemented")
}
func (UnimplementedRoleSerServer) RoleCreateClub(context.Context, *RoleCreateClub_Req) (*RoleCreateClub_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCreateClub not implemented")
}
func (UnimplementedRoleSerServer) RoleJoinClub(context.Context, *RoleJoinClub_Req) (*RoleJoinClub_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleJoinClub not implemented")
}
func (UnimplementedRoleSerServer) RoleExitClub(context.Context, *RoleExitClub_Req) (*RoleExitClub_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleExitClub not implemented")
}
func (UnimplementedRoleSerServer) RoleCancelClub(context.Context, *RoleCancelClub_Req) (*RoleCancelClub_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCancelClub not implemented")
}
func (UnimplementedRoleSerServer) mustEmbedUnimplementedRoleSerServer() {}

// UnsafeRoleSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleSerServer will
// result in compilation errors.
type UnsafeRoleSerServer interface {
	mustEmbedUnimplementedRoleSerServer()
}

func RegisterRoleSerServer(s grpc.ServiceRegistrar, srv RoleSerServer) {
	s.RegisterService(&RoleSer_ServiceDesc, srv)
}

func _RoleSer_RoleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleLogin_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleLogin(ctx, req.(*RoleLogin_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGetInfo_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleGetInfo(ctx, req.(*RoleGetInfo_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleModifyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModifyName_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleModifyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleModifyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleModifyName(ctx, req.(*RoleModifyName_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RolePowerUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePowerUp_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RolePowerUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RolePowerUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RolePowerUp(ctx, req.(*RolePowerUp_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKick_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleKick(ctx, req.(*RoleKick_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleGetClubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGetClubInfo_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleGetClubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleGetClubInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleGetClubInfo(ctx, req.(*RoleGetClubInfo_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleGetClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGetClubList_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleGetClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleGetClubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleGetClubList(ctx, req.(*RoleGetClubList_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleGetClubRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGetClubRoleInfo_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleGetClubRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleGetClubRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleGetClubRoleInfo(ctx, req.(*RoleGetClubRoleInfo_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleCreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateClub_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleCreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleCreateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleCreateClub(ctx, req.(*RoleCreateClub_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleJoinClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleJoinClub_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleJoinClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleJoinClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleJoinClub(ctx, req.(*RoleJoinClub_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleExitClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleExitClub_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleExitClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleExitClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleExitClub(ctx, req.(*RoleExitClub_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSer_RoleCancelClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCancelClub_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleSerServer).RoleCancelClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleSer/RoleCancelClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSerServer).RoleCancelClub(ctx, req.(*RoleCancelClub_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleSer_ServiceDesc is the grpc.ServiceDesc for RoleSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleSer",
	HandlerType: (*RoleSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleLogin",
			Handler:    _RoleSer_RoleLogin_Handler,
		},
		{
			MethodName: "RoleGetInfo",
			Handler:    _RoleSer_RoleGetInfo_Handler,
		},
		{
			MethodName: "RoleModifyName",
			Handler:    _RoleSer_RoleModifyName_Handler,
		},
		{
			MethodName: "RolePowerUp",
			Handler:    _RoleSer_RolePowerUp_Handler,
		},
		{
			MethodName: "RoleKick",
			Handler:    _RoleSer_RoleKick_Handler,
		},
		{
			MethodName: "RoleGetClubInfo",
			Handler:    _RoleSer_RoleGetClubInfo_Handler,
		},
		{
			MethodName: "RoleGetClubList",
			Handler:    _RoleSer_RoleGetClubList_Handler,
		},
		{
			MethodName: "RoleGetClubRoleInfo",
			Handler:    _RoleSer_RoleGetClubRoleInfo_Handler,
		},
		{
			MethodName: "RoleCreateClub",
			Handler:    _RoleSer_RoleCreateClub_Handler,
		},
		{
			MethodName: "RoleJoinClub",
			Handler:    _RoleSer_RoleJoinClub_Handler,
		},
		{
			MethodName: "RoleExitClub",
			Handler:    _RoleSer_RoleExitClub_Handler,
		},
		{
			MethodName: "RoleCancelClub",
			Handler:    _RoleSer_RoleCancelClub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
