// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.2.0
// source: club.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubSerClient is the client API for ClubSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubSerClient interface {
	ClubCreate(ctx context.Context, in *ClubCreate_Req, opts ...grpc.CallOption) (*ClubCreate_Rsp, error)
	ClubRead(ctx context.Context, in *ClubRead_Req, opts ...grpc.CallOption) (*ClubRead_Rsp, error)
	ClubDelete(ctx context.Context, in *ClubDelete_Req, opts ...grpc.CallOption) (*ClubDelete_Rsp, error)
	ClubJoin(ctx context.Context, in *ClubJoin_Req, opts ...grpc.CallOption) (*ClubJoin_Rsp, error)
	ClubExit(ctx context.Context, in *ClubExit_Req, opts ...grpc.CallOption) (*ClubExit_Rsp, error)
}

type clubSerClient struct {
	cc grpc.ClientConnInterface
}

func NewClubSerClient(cc grpc.ClientConnInterface) ClubSerClient {
	return &clubSerClient{cc}
}

func (c *clubSerClient) ClubCreate(ctx context.Context, in *ClubCreate_Req, opts ...grpc.CallOption) (*ClubCreate_Rsp, error) {
	out := new(ClubCreate_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubSer/ClubCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSerClient) ClubRead(ctx context.Context, in *ClubRead_Req, opts ...grpc.CallOption) (*ClubRead_Rsp, error) {
	out := new(ClubRead_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubSer/ClubRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSerClient) ClubDelete(ctx context.Context, in *ClubDelete_Req, opts ...grpc.CallOption) (*ClubDelete_Rsp, error) {
	out := new(ClubDelete_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubSer/ClubDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSerClient) ClubJoin(ctx context.Context, in *ClubJoin_Req, opts ...grpc.CallOption) (*ClubJoin_Rsp, error) {
	out := new(ClubJoin_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubSer/ClubJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSerClient) ClubExit(ctx context.Context, in *ClubExit_Req, opts ...grpc.CallOption) (*ClubExit_Rsp, error) {
	out := new(ClubExit_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubSer/ClubExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubSerServer is the server API for ClubSer service.
// All implementations must embed UnimplementedClubSerServer
// for forward compatibility
type ClubSerServer interface {
	ClubCreate(context.Context, *ClubCreate_Req) (*ClubCreate_Rsp, error)
	ClubRead(context.Context, *ClubRead_Req) (*ClubRead_Rsp, error)
	ClubDelete(context.Context, *ClubDelete_Req) (*ClubDelete_Rsp, error)
	ClubJoin(context.Context, *ClubJoin_Req) (*ClubJoin_Rsp, error)
	ClubExit(context.Context, *ClubExit_Req) (*ClubExit_Rsp, error)
	mustEmbedUnimplementedClubSerServer()
}

// UnimplementedClubSerServer must be embedded to have forward compatible implementations.
type UnimplementedClubSerServer struct {
}

func (UnimplementedClubSerServer) ClubCreate(context.Context, *ClubCreate_Req) (*ClubCreate_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubCreate not implemented")
}
func (UnimplementedClubSerServer) ClubRead(context.Context, *ClubRead_Req) (*ClubRead_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubRead not implemented")
}
func (UnimplementedClubSerServer) ClubDelete(context.Context, *ClubDelete_Req) (*ClubDelete_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubDelete not implemented")
}
func (UnimplementedClubSerServer) ClubJoin(context.Context, *ClubJoin_Req) (*ClubJoin_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubJoin not implemented")
}
func (UnimplementedClubSerServer) ClubExit(context.Context, *ClubExit_Req) (*ClubExit_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubExit not implemented")
}
func (UnimplementedClubSerServer) mustEmbedUnimplementedClubSerServer() {}

// UnsafeClubSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubSerServer will
// result in compilation errors.
type UnsafeClubSerServer interface {
	mustEmbedUnimplementedClubSerServer()
}

func RegisterClubSerServer(s grpc.ServiceRegistrar, srv ClubSerServer) {
	s.RegisterService(&ClubSer_ServiceDesc, srv)
}

func _ClubSer_ClubCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubCreate_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSerServer).ClubCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubSer/ClubCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSerServer).ClubCreate(ctx, req.(*ClubCreate_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSer_ClubRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubRead_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSerServer).ClubRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubSer/ClubRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSerServer).ClubRead(ctx, req.(*ClubRead_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSer_ClubDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubDelete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSerServer).ClubDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubSer/ClubDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSerServer).ClubDelete(ctx, req.(*ClubDelete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSer_ClubJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubJoin_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSerServer).ClubJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubSer/ClubJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSerServer).ClubJoin(ctx, req.(*ClubJoin_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSer_ClubExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubExit_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSerServer).ClubExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubSer/ClubExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSerServer).ClubExit(ctx, req.(*ClubExit_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubSer_ServiceDesc is the grpc.ServiceDesc for ClubSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClubSer",
	HandlerType: (*ClubSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClubCreate",
			Handler:    _ClubSer_ClubCreate_Handler,
		},
		{
			MethodName: "ClubRead",
			Handler:    _ClubSer_ClubRead_Handler,
		},
		{
			MethodName: "ClubDelete",
			Handler:    _ClubSer_ClubDelete_Handler,
		},
		{
			MethodName: "ClubJoin",
			Handler:    _ClubSer_ClubJoin_Handler,
		},
		{
			MethodName: "ClubExit",
			Handler:    _ClubSer_ClubExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.proto",
}

// ClubDaemonSerClient is the client API for ClubDaemonSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubDaemonSerClient interface {
	ClubKick(ctx context.Context, in *ClubKick_Req, opts ...grpc.CallOption) (*ClubKick_Rsp, error)
	ClubList(ctx context.Context, in *ClubList_Req, opts ...grpc.CallOption) (*ClubList_Rsp, error)
}

type clubDaemonSerClient struct {
	cc grpc.ClientConnInterface
}

func NewClubDaemonSerClient(cc grpc.ClientConnInterface) ClubDaemonSerClient {
	return &clubDaemonSerClient{cc}
}

func (c *clubDaemonSerClient) ClubKick(ctx context.Context, in *ClubKick_Req, opts ...grpc.CallOption) (*ClubKick_Rsp, error) {
	out := new(ClubKick_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubDaemonSer/ClubKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubDaemonSerClient) ClubList(ctx context.Context, in *ClubList_Req, opts ...grpc.CallOption) (*ClubList_Rsp, error) {
	out := new(ClubList_Rsp)
	err := c.cc.Invoke(ctx, "/proto.ClubDaemonSer/ClubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubDaemonSerServer is the server API for ClubDaemonSer service.
// All implementations must embed UnimplementedClubDaemonSerServer
// for forward compatibility
type ClubDaemonSerServer interface {
	ClubKick(context.Context, *ClubKick_Req) (*ClubKick_Rsp, error)
	ClubList(context.Context, *ClubList_Req) (*ClubList_Rsp, error)
	mustEmbedUnimplementedClubDaemonSerServer()
}

// UnimplementedClubDaemonSerServer must be embedded to have forward compatible implementations.
type UnimplementedClubDaemonSerServer struct {
}

func (UnimplementedClubDaemonSerServer) ClubKick(context.Context, *ClubKick_Req) (*ClubKick_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubKick not implemented")
}
func (UnimplementedClubDaemonSerServer) ClubList(context.Context, *ClubList_Req) (*ClubList_Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubList not implemented")
}
func (UnimplementedClubDaemonSerServer) mustEmbedUnimplementedClubDaemonSerServer() {}

// UnsafeClubDaemonSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubDaemonSerServer will
// result in compilation errors.
type UnsafeClubDaemonSerServer interface {
	mustEmbedUnimplementedClubDaemonSerServer()
}

func RegisterClubDaemonSerServer(s grpc.ServiceRegistrar, srv ClubDaemonSerServer) {
	s.RegisterService(&ClubDaemonSer_ServiceDesc, srv)
}

func _ClubDaemonSer_ClubKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubKick_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubDaemonSerServer).ClubKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubDaemonSer/ClubKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubDaemonSerServer).ClubKick(ctx, req.(*ClubKick_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubDaemonSer_ClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubList_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubDaemonSerServer).ClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClubDaemonSer/ClubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubDaemonSerServer).ClubList(ctx, req.(*ClubList_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubDaemonSer_ServiceDesc is the grpc.ServiceDesc for ClubDaemonSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubDaemonSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClubDaemonSer",
	HandlerType: (*ClubDaemonSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClubKick",
			Handler:    _ClubDaemonSer_ClubKick_Handler,
		},
		{
			MethodName: "ClubList",
			Handler:    _ClubDaemonSer_ClubList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.proto",
}
