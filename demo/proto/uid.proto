syntax = "proto3";

package proto;

import "options.proto";

option go_package = "proto/pb";

service UidSer {
    rpc AllocRoleId(AllocRoleId.Req) returns (AllocRoleId.Rsp);  // 分配RoleID
    rpc AllocClubId(AllocClubId.Req) returns (AllocClubId.Rsp);  // 分配ClubID
}

message UidMetaDB {
    string WorldId = 1 [(dbfield_option) = { flag: "UMWorldId", primary: true }];
    int64 CurRoleId = 2 [(dbfield_option) = { flag: "UMCurRoleId" }];
    int64 CurClubId = 3 [(dbfield_option) = { flag: "UMCurClubId" }];
}

enum UMFlag {
    UMUidMetaMin = 0;
    UMWorldId    = 1;
    UMCurRoleId  = 2;
    UMCurClubId  = 3;
}

message UidRoleIdDB {
    string OpenId = 1 [(dbfield_option) = { flag: "UROpenId", primary: true }];
    int64 RoleId  = 2 [(dbfield_option) = { flag: "URRoleId" }];
}

enum URFlag {
    URUidRoleIdMin = 0;
    UROpenId       = 1;
    URRoleId       = 2;
}

message UidClubIdDB {
    int64 ClubId  = 1 [(dbfield_option) = { flag: "UCClubId", primary: true }];
    int64 OwnerId = 2 [(dbfield_option) = { flag: "UCOwnerId" }];
}

enum UCFlag {
    UCUidClubIdMin = 0;
    UCClubId       = 1;
    UCOwnerId      = 2;
}

message AllocRoleId {
    option (rpc_option).route_key = "";
    message Req {
        string OpenId = 1;
    }
    message Rsp {
        int64 RoleId = 1;
    }
}

message AllocClubId {
    option (rpc_option).route_key = "";
    message Req {
        int64 RoleId = 1;
    }
    message Rsp {
        int64 ClubId = 1;
    }
}
